!function e(t,n,o){function r(i,s){if(!n[i]){if(!t[i]){var u="function"==typeof require&&require;if(!s&&u)return u(i,!0);if(a)return a(i,!0);var l=new Error("Cannot find module '"+i+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[i]={exports:{}};t[i][0].call(c.exports,function(e){var n=t[i][1][e];return r(n?n:e)},c,c.exports,e,t,n,o)}return n[i].exports}for(var a="function"==typeof require&&require,i=0;i<o.length;i++)r(o[i]);return r}({1:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=function(){function e(){o(this,e),console.log("Home"),this.controller=new ScrollMagic.Controller,this.animation(),this.slider()}return r(e,[{key:"slider",value:function(){$("#slider-home").responsiveSlides({manualControls:"#slider-pagination",timeout:4e3,auto:!0,before:function(e){}})}},{key:"animation",value:function(){this.homearea=new TimelineMax,this.hometitle=document.querySelector(".home-content h2"),this.homearea.fromTo(this.hometitle,.8,{opacity:0,y:-40},{opacity:1,y:0},.4);new ScrollMagic.Scene({triggerElement:"#home",reverse:!1}).setTween(this.homearea).addTo(this.controller)}}]),e}();n["default"]=a},{}],2:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=e("../tools/DeviceInfo"),s=o(i),u=e("../partials/Header"),l=o(u),c=e("../partials/Footer"),f=o(c),d=e("./Home"),h=o(d),v=function(){function e(){r(this,e),console.log("init"),this.ready()}return a(e,[{key:"ready",value:function(){switch(s["default"].check(),s["default"].isTouch&&document.body.classList.add("touch"),s["default"].isIE&&document.body.classList.add("ie"),s["default"].isAndroid&&document.body.classList.add("android"),s["default"].isIOS&&document.body.classList.add("ios"),s["default"].isFirefox&&document.body.classList.add("firefox"),s["default"].isSafari&&document.body.classList.add("safari"),s["default"].isChrome&&document.body.classList.add("chrome"),this.header=new l["default"],this.footer=new f["default"],$("body section").attr("data-template")){case"home":this.page=new h["default"]}}}]),e}();new v},{"../partials/Footer":3,"../partials/Header":4,"../tools/DeviceInfo":5,"./Home":1}],3:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function a(){o(this,a),console.log("Footer")};n["default"]=r},{}],4:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=function(){function e(){o(this,e),console.log("Header"),this.menuresize(),window.addEventListener("scroll",this.menuresize.bind(this)),window.addEventListener("scroll",this.activeOnScroll.bind(this)),this.anchor=document.querySelectorAll(".menu-item > a");for(var t=0;t<this.anchor.length;t++)this.anchor[t].addEventListener("click",this.anchorJump.bind(this))}return r(e,[{key:"menuresize",value:function(){var e=100;this.nav=document.getElementById("masthead"),window.pageYOffset>e&&this.nav.classList.add("small"),window.pageYOffset<=e&&this.nav.classList.remove("small")}},{key:"anchorJump",value:function(e){e.preventDefault(),$("html, body").animate({scrollTop:$(e.target.hash).offset().top},500)}},{key:"activeOnScroll",value:function(){for(var e=window.pageYOffset,t=document.querySelectorAll(".section"),n=0;n<t.length;n++){var o=t[n].getAttribute("id"),r=document.getElementById(o);if(null!=r){var a=$(r).position().top-168;e>=a&&($("#navbar ul li.active").removeClass("active"),$("#navbar ul li."+o).addClass("active"))}}}}]),e}();n["default"]=a},{}],5:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=function(){function e(){o(this,e)}return r(e,null,[{key:"check",value:function(){e.isFirefox=navigator.userAgent.toLowerCase().indexOf("firefox")>-1,e.isChrome=navigator.userAgent.toLowerCase().indexOf("chrome")>-1,e.isSafari=navigator.userAgent.toLowerCase().indexOf("chrome")<=-1&&navigator.userAgent.toLowerCase().indexOf("safari")>-1,e.isAndroid=navigator.userAgent.toLowerCase().indexOf("android")>-1,e.isIOS=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,e.isIE=-1!=e.getInternetExplorerVersion();try{document.createEvent("TouchEvent"),e.isTouch=!0}catch(t){e.isTouch=!1}}},{key:"getInternetExplorerVersion",value:function(){var e=-1,t=null,n=navigator.userAgent;return"Microsoft Internet Explorer"==navigator.appName?(t=new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})"),null!==t.exec(n)&&(e=parseFloat(RegExp.$1))):"Netscape"==navigator.appName&&(t=new RegExp("Trident/.*rv:([0-9]{1,}[.0-9]{0,})"),null!==t.exec(n)&&(e=parseFloat(RegExp.$1))),e}}]),e}();n["default"]=a},{}]},{},[2]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
