!function e(t,n,i){function o(a,s){if(!n[a]){if(!t[a]){var l="function"==typeof require&&require;if(!s&&l)return l(a,!0);if(r)return r(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[a]={exports:{}};t[a][0].call(u.exports,function(e){var n=t[a][1][e];return o(n?n:e)},u,u.exports,e,t,n,i)}return n[a].exports}for(var r="function"==typeof require&&require,a=0;a<i.length;a++)o(i[a]);return o}({1:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=function(){function e(){i(this,e),console.log("Home"),this.controller=new ScrollMagic.Controller,this.animation(),this.slider()}return o(e,[{key:"slider",value:function(){$("#slider-home").responsiveSlides({manualControls:"#slider-pagination",timeout:6e3,auto:!0,before:function(e){this.hometitle=$(".home-content h2").eq(e),TweenLite.fromTo(this.hometitle,1,{opacity:0,y:-40},{opacity:1,y:0},.4)}})}},{key:"animation",value:function(){this.homearea=new TimelineMax,this.projectarea=new TimelineMax,this.skillarea=new TimelineMax,this.hometitle=document.querySelector(".home-content h2"),this.projectitem=document.querySelectorAll(".grid-item"),this.skillitem=document.querySelectorAll(".skill-item"),this.homearea.fromTo(this.hometitle,1,{opacity:0,y:-40},{opacity:1,y:0},.4),this.projectarea.staggerFromTo(this.projectitem,.2,{scale:0,y:20},{scale:1,y:0},.2),this.skillarea.staggerFromTo(this.skillitem,.2,{opacity:0,x:-20},{opacity:1,x:0},.2);new ScrollMagic.Scene({triggerElement:"#home",reverse:!1}).setTween(this.homearea).addTo(this.controller),new ScrollMagic.Scene({triggerElement:"#projects",reverse:!1}).setTween(this.projectarea).addTo(this.controller),new ScrollMagic.Scene({triggerElement:"#projects",reverse:!1}).setTween(this.skillarea).addTo(this.controller)}}]),e}();n["default"]=r},{}],2:[function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a=e("../tools/DeviceInfo"),s=i(a),l=e("../partials/Header"),c=i(l),u=e("../partials/Footer"),f=i(u),d=e("./Home"),h=i(d),m=e("./Single"),p=i(m),g=function(){function e(){o(this,e),console.log("init"),this.ready()}return r(e,[{key:"ready",value:function(){switch(s["default"].check(),s["default"].isTouch&&document.body.classList.add("touch"),s["default"].isIE&&document.body.classList.add("ie"),s["default"].isAndroid&&document.body.classList.add("android"),s["default"].isIOS&&document.body.classList.add("ios"),s["default"].isFirefox&&document.body.classList.add("firefox"),s["default"].isSafari&&document.body.classList.add("safari"),s["default"].isChrome&&document.body.classList.add("chrome"),this.header=new c["default"],this.footer=new f["default"],$("body section").attr("data-template")){case"home":this.page=new h["default"];break;case"single":this.page=new p["default"]}}}]),e}();new g},{"../partials/Footer":4,"../partials/Header":5,"../tools/DeviceInfo":6,"./Home":1,"./Single":3}],3:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=function(){function e(){i(this,e),console.log("Single"),this.panel=document.getElementById("panel"),this.controller=new ScrollMagic.Controller,this.animationsingle=this.animationsingle.bind(this),this.animationsingle(),this.slider=this.slider.bind(this),this.slider()}return o(e,[{key:"slider",value:function(){$("#slider-single").responsiveSlides({manualControls:"#slider-pagination",timeout:6e3,auto:!0,before:function(e){this.hometitle=$(".slider-content h2").eq(e),TweenLite.fromTo(this.hometitle,1,{opacity:0,y:-40},{opacity:1,y:0},.4)}})}},{key:"animationsingle",value:function(){this.panelarea=new TimelineMax,this.panel=document.querySelector("#panel"),this.elements=document.querySelectorAll("#panel .elem"),this.panelarea.fromTo(this.panel,1,{opacity:0,x:40},{opacity:1,x:0},{ease:"Cubic.easeOut"}),this.panelarea.staggerFromTo(this.elements,.5,{opacity:0,y:-40},{opacity:1,y:0},.2);new ScrollMagic.Scene({triggerElement:"#main",reverse:!1}).setTween(this.panelarea).addTo(this.controller)}}]),e}();n["default"]=r},{}],4:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function r(){i(this,r),console.log("Footer")};n["default"]=o},{}],5:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=function(){function e(){i(this,e),console.log("Header"),this.hamburger=document.getElementById("hamburger"),this.anchor=document.querySelectorAll(".menu-item > a");for(var t=0;t<this.anchor.length;t++)this.anchor[t].addEventListener("click",this.anchorJump.bind(this));this.menuresize=this.menuresize.bind(this),this.menuresize(),window.addEventListener("scroll",this.menuresize.bind(this)),window.addEventListener("scroll",this.activeOnScroll.bind(this)),this.hamburger.addEventListener("click",this.togglemenumobile.bind(this)),this.click=!1}return o(e,[{key:"menuresize",value:function(){var e=100;this.nav=document.getElementById("masthead"),window.pageYOffset>e&&this.nav.classList.add("small"),window.pageYOffset<=e&&this.nav.classList.remove("small")}},{key:"anchorJump",value:function(e){console.log(home);var t=document.body.classList.contains("single");t?window.location.href=home+e.target.hash:(e.preventDefault(),$("html, body").animate({scrollTop:$(e.target.hash).offset().top-44},500))}},{key:"activeOnScroll",value:function(){for(var e=window.pageYOffset,t=document.querySelectorAll(".section"),n=0;n<t.length;n++){var i=t[n].getAttribute("id"),o=document.getElementById(i);if(null!=o){var r=$(o).position().top-100;e>=r&&($("#navbar ul li.active").removeClass("active"),$("#navbar ul li."+i).addClass("active"))}}}},{key:"togglemenumobile",value:function(e){this.click?(TweenLite.to(this.panel,0,{className:"-=open",css:"transform: translateX(-100%)"}),this.click=!1):(TweenLite.to(this.panel,0,{className:"+=open",css:"transform: translateX(-100%)"}),this.click=!0)}}]),e}();n["default"]=r},{}],6:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=function(){function e(){i(this,e)}return o(e,null,[{key:"check",value:function(){e.isFirefox=navigator.userAgent.toLowerCase().indexOf("firefox")>-1,e.isChrome=navigator.userAgent.toLowerCase().indexOf("chrome")>-1,e.isSafari=navigator.userAgent.toLowerCase().indexOf("chrome")<=-1&&navigator.userAgent.toLowerCase().indexOf("safari")>-1,e.isAndroid=navigator.userAgent.toLowerCase().indexOf("android")>-1,e.isIOS=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,e.isIE=-1!=e.getInternetExplorerVersion();try{document.createEvent("TouchEvent"),e.isTouch=!0}catch(t){e.isTouch=!1}}},{key:"getInternetExplorerVersion",value:function(){var e=-1,t=null,n=navigator.userAgent;return"Microsoft Internet Explorer"==navigator.appName?(t=new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})"),null!==t.exec(n)&&(e=parseFloat(RegExp.$1))):"Netscape"==navigator.appName&&(t=new RegExp("Trident/.*rv:([0-9]{1,}[.0-9]{0,})"),null!==t.exec(n)&&(e=parseFloat(RegExp.$1))),e}}]),e}();n["default"]=r},{}]},{},[2]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
