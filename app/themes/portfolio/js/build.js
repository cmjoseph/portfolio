!function e(t,n,o){function r(a,s){if(!n[a]){if(!t[a]){var l="function"==typeof require&&require;if(!s&&l)return l(a,!0);if(i)return i(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[a]={exports:{}};t[a][0].call(u.exports,function(e){var n=t[a][1][e];return r(n?n:e)},u,u.exports,e,t,n,o)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<o.length;a++)r(o[a]);return r}({1:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(){o(this,e),console.log("Home"),this.controller=new ScrollMagic.Controller,this.animation(),this.slider()}return r(e,[{key:"slider",value:function(){$("#slider-home").responsiveSlides({manualControls:"#slider-pagination",timeout:6e3,auto:!0,before:function(e){this.hometitle=$(".home-content h2").eq(e),TweenLite.fromTo(this.hometitle,1,{opacity:0,y:-40},{opacity:1,y:0},.4)}})}},{key:"animation",value:function(){this.homearea=new TimelineMax,this.projectarea=new TimelineMax,this.skillarea=new TimelineMax,this.hometitle=document.querySelector(".home-content h2"),this.projectitem=document.querySelectorAll(".grid-item"),this.skillitem=document.querySelectorAll(".skill-item"),this.homearea.fromTo(this.hometitle,1,{opacity:0,y:-40},{opacity:1,y:0},.4),this.projectarea.staggerFromTo(this.projectitem,.2,{scale:0,y:20},{scale:1,y:0},.2),this.skillarea.staggerFromTo(this.skillitem,.2,{opacity:0,x:-20},{opacity:1,x:0},.2);new ScrollMagic.Scene({triggerElement:"#home",reverse:!1}).setTween(this.homearea).addTo(this.controller),new ScrollMagic.Scene({triggerElement:"#projects",reverse:!1}).setTween(this.projectarea).addTo(this.controller),new ScrollMagic.Scene({triggerElement:"#projects",reverse:!1}).setTween(this.skillarea).addTo(this.controller)}}]),e}();n["default"]=i},{}],2:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("../tools/DeviceInfo"),s=o(a),l=e("../partials/Header"),c=o(l),u=e("../partials/Footer"),f=o(u),d=e("./Home"),h=o(d),m=function(){function e(){r(this,e),console.log("init"),this.ready()}return i(e,[{key:"ready",value:function(){switch(s["default"].check(),s["default"].isTouch&&document.body.classList.add("touch"),s["default"].isIE&&document.body.classList.add("ie"),s["default"].isAndroid&&document.body.classList.add("android"),s["default"].isIOS&&document.body.classList.add("ios"),s["default"].isFirefox&&document.body.classList.add("firefox"),s["default"].isSafari&&document.body.classList.add("safari"),s["default"].isChrome&&document.body.classList.add("chrome"),this.header=new c["default"],this.footer=new f["default"],$("body section").attr("data-template")){case"home":this.page=new h["default"]}}}]),e}();new m},{"../partials/Footer":3,"../partials/Header":4,"../tools/DeviceInfo":5,"./Home":1}],3:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function i(){o(this,i),console.log("Footer")};n["default"]=r},{}],4:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(){o(this,e),console.log("Header"),this.menuresize(),window.addEventListener("scroll",this.menuresize.bind(this)),window.addEventListener("scroll",this.activeOnScroll.bind(this)),this.anchor=document.querySelectorAll(".menu-item > a");for(var t=0;t<this.anchor.length;t++)this.anchor[t].addEventListener("click",this.anchorJump.bind(this))}return r(e,[{key:"menuresize",value:function(){var e=100;this.nav=document.getElementById("masthead"),window.pageYOffset>e&&this.nav.classList.add("small"),window.pageYOffset<=e&&this.nav.classList.remove("small")}},{key:"anchorJump",value:function(e){e.preventDefault(),$("html, body").animate({scrollTop:$(e.target.hash).offset().top-44},500)}},{key:"activeOnScroll",value:function(){for(var e=window.pageYOffset,t=document.querySelectorAll(".section"),n=0;n<t.length;n++){var o=t[n].getAttribute("id"),r=document.getElementById(o);if(null!=r){var i=$(r).position().top-100;e>=i&&($("#navbar ul li.active").removeClass("active"),$("#navbar ul li."+o).addClass("active"))}}}}]),e}();n["default"]=i},{}],5:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(){o(this,e)}return r(e,null,[{key:"check",value:function(){e.isFirefox=navigator.userAgent.toLowerCase().indexOf("firefox")>-1,e.isChrome=navigator.userAgent.toLowerCase().indexOf("chrome")>-1,e.isSafari=navigator.userAgent.toLowerCase().indexOf("chrome")<=-1&&navigator.userAgent.toLowerCase().indexOf("safari")>-1,e.isAndroid=navigator.userAgent.toLowerCase().indexOf("android")>-1,e.isIOS=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,e.isIE=-1!=e.getInternetExplorerVersion();try{document.createEvent("TouchEvent"),e.isTouch=!0}catch(t){e.isTouch=!1}}},{key:"getInternetExplorerVersion",value:function(){var e=-1,t=null,n=navigator.userAgent;return"Microsoft Internet Explorer"==navigator.appName?(t=new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})"),null!==t.exec(n)&&(e=parseFloat(RegExp.$1))):"Netscape"==navigator.appName&&(t=new RegExp("Trident/.*rv:([0-9]{1,}[.0-9]{0,})"),null!==t.exec(n)&&(e=parseFloat(RegExp.$1))),e}}]),e}();n["default"]=i},{}]},{},[2]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
