!function e(t,n,o){function r(i,u){if(!n[i]){if(!t[i]){var s="function"==typeof require&&require;if(!u&&s)return s(i,!0);if(a)return a(i,!0);var c=new Error("Cannot find module '"+i+"'");throw c.code="MODULE_NOT_FOUND",c}var f=n[i]={exports:{}};t[i][0].call(f.exports,function(e){var n=t[i][1][e];return r(n?n:e)},f,f.exports,e,t,n,o)}return n[i].exports}for(var a="function"==typeof require&&require,i=0;i<o.length;i++)r(o[i]);return r}({1:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function a(){o(this,a),console.log("Home")};n["default"]=r},{}],2:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=e("../tools/DeviceInfo"),u=o(i),s=e("../partials/Header"),c=o(s),f=e("../partials/Footer"),l=o(f),d=e("./Home"),p=o(d),v=function(){function e(){r(this,e),console.log("init main"),this.ready()}return a(e,[{key:"ready",value:function(){switch(u["default"].check(),u["default"].isTouch&&document.body.classList.add("touch"),u["default"].isIE&&document.body.classList.add("ie"),u["default"].isAndroid&&document.body.classList.add("android"),u["default"].isIOS&&document.body.classList.add("ios"),u["default"].isFirefox&&document.body.classList.add("firefox"),u["default"].isSafari&&document.body.classList.add("safari"),u["default"].isChrome&&document.body.classList.add("chrome"),this.header=new c["default"],this.footer=new l["default"],$("body section").attr("data-template")){case"home":this.page=new p["default"]}}}]),e}();new v},{"../partials/Footer":3,"../partials/Header":4,"../tools/DeviceInfo":5,"./Home":1}],3:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function a(){o(this,a),console.log("Footer")};n["default"]=r},{}],4:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function a(){o(this,a),console.log("Header")};n["default"]=r},{}],5:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=function(){function e(){o(this,e)}return r(e,null,[{key:"check",value:function(){e.isFirefox=navigator.userAgent.toLowerCase().indexOf("firefox")>-1,e.isChrome=navigator.userAgent.toLowerCase().indexOf("chrome")>-1,e.isSafari=navigator.userAgent.toLowerCase().indexOf("chrome")<=-1&&navigator.userAgent.toLowerCase().indexOf("safari")>-1,e.isAndroid=navigator.userAgent.toLowerCase().indexOf("android")>-1,e.isIOS=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,e.isIE=-1!=e.getInternetExplorerVersion();try{document.createEvent("TouchEvent"),e.isTouch=!0}catch(t){e.isTouch=!1}}},{key:"getInternetExplorerVersion",value:function(){var e=-1,t=null,n=navigator.userAgent;return"Microsoft Internet Explorer"==navigator.appName?(t=new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})"),null!==t.exec(n)&&(e=parseFloat(RegExp.$1))):"Netscape"==navigator.appName&&(t=new RegExp("Trident/.*rv:([0-9]{1,}[.0-9]{0,})"),null!==t.exec(n)&&(e=parseFloat(RegExp.$1))),e}}]),e}();n["default"]=a},{}]},{},[2]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJidWlsZC5qcyIsInNyYy9qcy9jdXN0b20vSG9tZS5qcyIsInNyYy9qcy9jdXN0b20vTWFpbi5qcyIsInNyYy9qcy9wYXJ0aWFscy9Gb290ZXIuanMiLCJzcmMvanMvcGFydGlhbHMvSGVhZGVyLmpzIiwic3JjL2pzL3Rvb2xzL0RldmljZUluZm8uanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJIb21lIiwidGhpcyIsImNvbnNvbGUiLCJsb2ciLCIyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIl9EZXZpY2VJbmZvIiwiX0RldmljZUluZm8yIiwiX0hlYWRlciIsIl9IZWFkZXIyIiwiX0Zvb3RlciIsIl9Gb290ZXIyIiwiX0hvbWUiLCJfSG9tZTIiLCJNYWluIiwicmVhZHkiLCJjaGVjayIsImlzVG91Y2giLCJkb2N1bWVudCIsImJvZHkiLCJjbGFzc0xpc3QiLCJhZGQiLCJpc0lFIiwiaXNBbmRyb2lkIiwiaXNJT1MiLCJpc0ZpcmVmb3giLCJpc1NhZmFyaSIsImlzQ2hyb21lIiwiaGVhZGVyIiwiZm9vdGVyIiwiJCIsImF0dHIiLCJwYWdlIiwiLi4vcGFydGlhbHMvRm9vdGVyIiwiLi4vcGFydGlhbHMvSGVhZGVyIiwiLi4vdG9vbHMvRGV2aWNlSW5mbyIsIi4vSG9tZSIsIjMiLCJGb290ZXIiLCI0IiwiSGVhZGVyIiwiNSIsIkRldmljZUluZm8iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJ0ZXN0Iiwid2luZG93IiwiTVNTdHJlYW0iLCJnZXRJbnRlcm5ldEV4cGxvcmVyVmVyc2lvbiIsImNyZWF0ZUV2ZW50IiwicnYiLCJyZSIsInVhIiwiYXBwTmFtZSIsIlJlZ0V4cCIsImV4ZWMiLCJwYXJzZUZsb2F0IiwiJDEiXSwibWFwcGluZ3MiOiJDQUFBLFFBQUFBLEdBQUFDLEVBQUFDLEVBQUFDLEdBQUEsUUFBQUMsR0FBQUMsRUFBQUMsR0FBQSxJQUFBSixFQUFBRyxHQUFBLENBQUEsSUFBQUosRUFBQUksR0FBQSxDQUFBLEdBQUFFLEdBQUEsa0JBQUFDLFVBQUFBLE9BQUEsS0FBQUYsR0FBQUMsRUFBQSxNQUFBQSxHQUFBRixHQUFBLEVBQUEsSUFBQUksRUFBQSxNQUFBQSxHQUFBSixHQUFBLEVBQUEsSUFBQUssR0FBQSxHQUFBQyxPQUFBLHVCQUFBTixFQUFBLElBQUEsTUFBQUssR0FBQUUsS0FBQSxtQkFBQUYsRUFBQSxHQUFBRyxHQUFBWCxFQUFBRyxJQUFBUyxXQUFBYixHQUFBSSxHQUFBLEdBQUFVLEtBQUFGLEVBQUFDLFFBQUEsU0FBQWQsR0FBQSxHQUFBRSxHQUFBRCxFQUFBSSxHQUFBLEdBQUFMLEVBQUEsT0FBQUksR0FBQUYsRUFBQUEsRUFBQUYsSUFBQWEsRUFBQUEsRUFBQUMsUUFBQWQsRUFBQUMsRUFBQUMsRUFBQUMsR0FBQSxNQUFBRCxHQUFBRyxHQUFBUyxRQUFBLElBQUEsR0FBQUwsR0FBQSxrQkFBQUQsVUFBQUEsUUFBQUgsRUFBQSxFQUFBQSxFQUFBRixFQUFBYSxPQUFBWCxJQUFBRCxFQUFBRCxFQUFBRSxHQUFBLE9BQUFE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RUosRUFBV2hCLFNBQVdpQixVQUFVQyxVQUFVQyxjQUFjQyxRQUFRLFdBQWEsSUFBTUgsVUFBVUMsVUFBVUMsY0FBY0MsUUFBUSxVQUFZLEdBQ3pJSixFQUFXbkIsVUFBWW9CLFVBQVVDLFVBQVVDLGNBQWNDLFFBQVEsV0FBYSxHQUM5RUosRUFBV2xCLE1BQVEsbUJBQW1CdUIsS0FBS0osVUFBVUMsYUFBZUksT0FBT0MsU0FHM0VQLEVBQVdwQixLQUFrRCxJQUEzQ29CLEVBQVdRLDRCQUc3QixLQUNVaEMsU0FBU2lDLFlBQVksY0FDckJULEVBQVd6QixTQUFVLEVBRXZCLE1BQU8xRCxHQUNMbUYsRUFBV3pCLFNBQVUsTUxxSTdCZixJQUFLLDZCQUNMbEIsTUFBTyxXSy9ISixHQUFJb0UsR0FBSyxHQUNMQyxFQUFLLEtBQ0ZDLEVBQUtYLFVBQVVDLFNBZ0IzQixPQWR5QiwrQkFBckJELFVBQVVZLFNBR2JGLEVBQU0sR0FBSUcsUUFBTyw4QkFFRyxPQUFoQkgsRUFBR0ksS0FBS0gsS0FBY0YsRUFBS00sV0FBWUYsT0FBT0csTUFFbkIsWUFBckJoQixVQUFVWSxVQUVwQkYsRUFBTSxHQUFJRyxRQUFPLHNDQUVHLE9BQWhCSCxFQUFHSSxLQUFLSCxLQUFjRixFQUFLTSxXQUFZRixPQUFPRyxNQUc1Q1AsTUxtSUFWLElBR1RyRSxHQUFBQSxXS2pJZXFFLFlMbUlKIiwiZmlsZSI6ImJ1aWxkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEhvbWUgPSBmdW5jdGlvbiBIb21lKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIb21lKTtcblxuICAgIGNvbnNvbGUubG9nKCdIb21lJyk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBIb21lO1xuXG59LHt9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9EZXZpY2VJbmZvID0gcmVxdWlyZSgnLi4vdG9vbHMvRGV2aWNlSW5mbycpO1xuXG52YXIgX0RldmljZUluZm8yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGV2aWNlSW5mbyk7XG5cbnZhciBfSGVhZGVyID0gcmVxdWlyZSgnLi4vcGFydGlhbHMvSGVhZGVyJyk7XG5cbnZhciBfSGVhZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0hlYWRlcik7XG5cbnZhciBfRm9vdGVyID0gcmVxdWlyZSgnLi4vcGFydGlhbHMvRm9vdGVyJyk7XG5cbnZhciBfRm9vdGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Zvb3Rlcik7XG5cbnZhciBfSG9tZSA9IHJlcXVpcmUoJy4vSG9tZScpO1xuXG52YXIgX0hvbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSG9tZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBNYWluID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1haW4oKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYWluKTtcblxuICAgICAgICBjb25zb2xlLmxvZygnaW5pdCBtYWluJyk7XG4gICAgICAgIHRoaXMucmVhZHkoKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTWFpbiwgW3tcbiAgICAgICAga2V5OiAncmVhZHknLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZHkoKSB7XG4gICAgICAgICAgICBfRGV2aWNlSW5mbzIuZGVmYXVsdC5jaGVjaygpO1xuICAgICAgICAgICAgaWYgKF9EZXZpY2VJbmZvMi5kZWZhdWx0LmlzVG91Y2gpIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcInRvdWNoXCIpO1xuICAgICAgICAgICAgaWYgKF9EZXZpY2VJbmZvMi5kZWZhdWx0LmlzSUUpIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcImllXCIpO1xuICAgICAgICAgICAgaWYgKF9EZXZpY2VJbmZvMi5kZWZhdWx0LmlzQW5kcm9pZCkgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwiYW5kcm9pZFwiKTtcbiAgICAgICAgICAgIGlmIChfRGV2aWNlSW5mbzIuZGVmYXVsdC5pc0lPUykgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwiaW9zXCIpO1xuICAgICAgICAgICAgaWYgKF9EZXZpY2VJbmZvMi5kZWZhdWx0LmlzRmlyZWZveCkgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwiZmlyZWZveFwiKTtcbiAgICAgICAgICAgIGlmIChfRGV2aWNlSW5mbzIuZGVmYXVsdC5pc1NhZmFyaSkgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwic2FmYXJpXCIpO1xuICAgICAgICAgICAgaWYgKF9EZXZpY2VJbmZvMi5kZWZhdWx0LmlzQ2hyb21lKSBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJjaHJvbWVcIik7XG4gICAgICAgICAgICAvLyBsZXQgcHJlbG9hZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByZWxvYWRlcicpO1xuICAgICAgICAgICAgLy8gVHdlZW5MaXRlLnRvKHByZWxvYWRlciwgMC41LHtjc3M6e2F1dG9BbHBoYTowfSxkZWxheTowLjR9KTtcbiAgICAgICAgICAgIC8vIFR3ZWVuTGl0ZS5zZXQocHJlbG9hZGVyLHtjc3M6e2Rpc3BsYXk6XCJibG9ja1wifSxkZWxheTowLjh9KTtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyID0gbmV3IF9IZWFkZXIyLmRlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuZm9vdGVyID0gbmV3IF9Gb290ZXIyLmRlZmF1bHQoKTtcblxuICAgICAgICAgICAgc3dpdGNoICgkKCdib2R5IHNlY3Rpb24nKS5hdHRyKFwiZGF0YS10ZW1wbGF0ZVwiKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJob21lXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFnZSA9IG5ldyBfSG9tZTIuZGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBNYWluO1xufSgpO1xuXG5uZXcgTWFpbigpO1xuXG59LHtcIi4uL3BhcnRpYWxzL0Zvb3RlclwiOjMsXCIuLi9wYXJ0aWFscy9IZWFkZXJcIjo0LFwiLi4vdG9vbHMvRGV2aWNlSW5mb1wiOjUsXCIuL0hvbWVcIjoxfV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEZvb3RlciA9IGZ1bmN0aW9uIEZvb3RlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9vdGVyKTtcblxuICAgIGNvbnNvbGUubG9nKCdGb290ZXInKTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEZvb3RlcjtcblxufSx7fV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEhlYWRlciA9IGZ1bmN0aW9uIEhlYWRlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGVhZGVyKTtcblxuICAgIGNvbnNvbGUubG9nKCdIZWFkZXInKTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEhlYWRlcjtcblxufSx7fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdFx0dmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgRGV2aWNlSW5mbyA9IGZ1bmN0aW9uICgpIHtcblx0XHRmdW5jdGlvbiBEZXZpY2VJbmZvKCkge1xuXHRcdFx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGV2aWNlSW5mbyk7XG5cdFx0fVxuXG5cdFx0X2NyZWF0ZUNsYXNzKERldmljZUluZm8sIG51bGwsIFt7XG5cdFx0XHRcdGtleTogXCJjaGVja1wiLFxuXHRcdFx0XHR2YWx1ZTogZnVuY3Rpb24gY2hlY2soKSB7XG5cblx0XHRcdFx0XHRcdC8vRkZcblx0XHRcdFx0XHRcdERldmljZUluZm8uaXNGaXJlZm94ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJmaXJlZm94XCIpID4gLTEgPyB0cnVlIDogZmFsc2U7XG5cdFx0XHRcdFx0XHREZXZpY2VJbmZvLmlzQ2hyb21lID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJjaHJvbWVcIikgPiAtMSA/IHRydWUgOiBmYWxzZTtcblx0XHRcdFx0XHRcdERldmljZUluZm8uaXNTYWZhcmkgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImNocm9tZVwiKSA8PSAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcInNhZmFyaVwiKSA+IC0xID8gdHJ1ZSA6IGZhbHNlO1xuXHRcdFx0XHRcdFx0RGV2aWNlSW5mby5pc0FuZHJvaWQgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImFuZHJvaWRcIikgPiAtMSA/IHRydWUgOiBmYWxzZTtcblx0XHRcdFx0XHRcdERldmljZUluZm8uaXNJT1MgPSAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhd2luZG93Lk1TU3RyZWFtO1xuXG5cdFx0XHRcdFx0XHQvL0lFXG5cdFx0XHRcdFx0XHREZXZpY2VJbmZvLmlzSUUgPSBEZXZpY2VJbmZvLmdldEludGVybmV0RXhwbG9yZXJWZXJzaW9uKCkgIT0gLTE7XG5cblx0XHRcdFx0XHRcdC8vIElTIFRPVUNIXG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiVG91Y2hFdmVudFwiKTtcblx0XHRcdFx0XHRcdFx0XHREZXZpY2VJbmZvLmlzVG91Y2ggPSB0cnVlO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0XHRcdERldmljZUluZm8uaXNUb3VjaCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0fSwge1xuXHRcdFx0XHRrZXk6IFwiZ2V0SW50ZXJuZXRFeHBsb3JlclZlcnNpb25cIixcblx0XHRcdFx0dmFsdWU6IGZ1bmN0aW9uIGdldEludGVybmV0RXhwbG9yZXJWZXJzaW9uKCkge1xuXG5cdFx0XHRcdFx0XHR2YXIgcnYgPSAtMTtcblx0XHRcdFx0XHRcdHZhciByZSA9IG51bGw7XG5cdFx0XHRcdFx0XHR2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuXG5cdFx0XHRcdFx0XHRpZiAobmF2aWdhdG9yLmFwcE5hbWUgPT0gJ01pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlcicpIHtcblxuXHRcdFx0XHRcdFx0XHRcdHJlID0gbmV3IFJlZ0V4cChcIk1TSUUgKFswLTldezEsfVtcXC4wLTldezAsfSlcIik7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAocmUuZXhlYyh1YSkgIT09IG51bGwpIHJ2ID0gcGFyc2VGbG9hdChSZWdFeHAuJDEpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChuYXZpZ2F0b3IuYXBwTmFtZSA9PSAnTmV0c2NhcGUnKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRyZSA9IG5ldyBSZWdFeHAoXCJUcmlkZW50Ly4qcnY6KFswLTldezEsfVtcXC4wLTldezAsfSlcIik7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAocmUuZXhlYyh1YSkgIT09IG51bGwpIHJ2ID0gcGFyc2VGbG9hdChSZWdFeHAuJDEpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcnY7XG5cdFx0XHRcdH1cblx0XHR9XSk7XG5cblx0XHRyZXR1cm4gRGV2aWNlSW5mbztcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRGV2aWNlSW5mbztcblxufSx7fV19LHt9LFsyXSlcblxuIiwiY2xhc3MgSG9tZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdIb21lJyk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBIb21lOyIsImltcG9ydCBEZXZpY2VJbmZvIGZyb20gJy4uL3Rvb2xzL0RldmljZUluZm8nO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuLi9wYXJ0aWFscy9IZWFkZXInO1xuaW1wb3J0IEZvb3RlciBmcm9tICcuLi9wYXJ0aWFscy9Gb290ZXInO1xuXG5pbXBvcnQgSG9tZSBmcm9tICcuL0hvbWUnO1xuXG5jbGFzcyBNYWluIHtcblxuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2luaXQgbWFpbicpO1xuICAgICAgICB0aGlzLnJlYWR5KCk7XG4gICAgfVxuXG4gICAgcmVhZHkoKSB7XG4gICAgXHREZXZpY2VJbmZvLmNoZWNrKCk7XG4gICAgICAgIGlmKERldmljZUluZm8uaXNUb3VjaCkgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwidG91Y2hcIik7XG4gICAgXHRpZihEZXZpY2VJbmZvLmlzSUUpIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcImllXCIpO1xuICAgIFx0aWYoRGV2aWNlSW5mby5pc0FuZHJvaWQpIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcImFuZHJvaWRcIik7XG4gICAgXHRpZihEZXZpY2VJbmZvLmlzSU9TKSBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJpb3NcIik7XG4gICAgICAgIGlmKERldmljZUluZm8uaXNGaXJlZm94KSBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJmaXJlZm94XCIpO1xuICAgICAgICBpZihEZXZpY2VJbmZvLmlzU2FmYXJpKSBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJzYWZhcmlcIik7XG4gICAgICAgIGlmKERldmljZUluZm8uaXNDaHJvbWUpIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcImNocm9tZVwiKTtcbiAgICAgICAgLy8gbGV0IHByZWxvYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmVsb2FkZXInKTtcbiAgICAgICAgLy8gVHdlZW5MaXRlLnRvKHByZWxvYWRlciwgMC41LHtjc3M6e2F1dG9BbHBoYTowfSxkZWxheTowLjR9KTtcbiAgICAgICAgLy8gVHdlZW5MaXRlLnNldChwcmVsb2FkZXIse2Nzczp7ZGlzcGxheTpcImJsb2NrXCJ9LGRlbGF5OjAuOH0pO1xuICAgICAgICB0aGlzLmhlYWRlciA9IG5ldyBIZWFkZXIoKTtcbiAgICAgICAgdGhpcy5mb290ZXIgPSBuZXcgRm9vdGVyKCk7XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2goJCgnYm9keSBzZWN0aW9uJykuYXR0cihcImRhdGEtdGVtcGxhdGVcIikpe1xuICAgICAgICAgICAgY2FzZSBcImhvbWVcIjogdGhpcy5wYWdlID0gbmV3IEhvbWUoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cblxubmV3IE1haW4oKTsiLCJjbGFzcyBGb290ZXIge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnRm9vdGVyJyk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGb290ZXI7IiwiY2xhc3MgSGVhZGVyIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0hlYWRlcicpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGVhZGVyOyIsImNsYXNzIERldmljZUluZm8ge1xyXG5cclxuXHRzdGF0aWMgY2hlY2soKSB7XHJcblxyXG5cdFx0Ly9GRlxyXG5cdFx0RGV2aWNlSW5mby5pc0ZpcmVmb3ggPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImZpcmVmb3hcIikgPiAtMSA/IHRydWUgOiBmYWxzZTtcclxuXHRcdERldmljZUluZm8uaXNDaHJvbWUgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImNocm9tZVwiKSA+IC0xID8gdHJ1ZSA6IGZhbHNlO1xyXG5cdFx0RGV2aWNlSW5mby5pc1NhZmFyaSA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiY2hyb21lXCIpIDw9IC0xICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwic2FmYXJpXCIpID4gLTEgPyB0cnVlIDogZmFsc2U7XHJcblx0XHREZXZpY2VJbmZvLmlzQW5kcm9pZCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiYW5kcm9pZFwiKSA+IC0xID8gdHJ1ZSA6IGZhbHNlO1xyXG5cdFx0RGV2aWNlSW5mby5pc0lPUyA9IC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmICF3aW5kb3cuTVNTdHJlYW07XHJcblxyXG5cdFx0Ly9JRVxyXG5cdFx0RGV2aWNlSW5mby5pc0lFID0gRGV2aWNlSW5mby5nZXRJbnRlcm5ldEV4cGxvcmVyVmVyc2lvbigpICE9IC0xO1xyXG5cclxuXHRcdC8vIElTIFRPVUNIXHJcblx0XHR0cnkge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5jcmVhdGVFdmVudChcIlRvdWNoRXZlbnRcIik7XHJcbiAgICAgICAgICAgIERldmljZUluZm8uaXNUb3VjaCA9IHRydWU7XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgRGV2aWNlSW5mby5pc1RvdWNoID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXRJbnRlcm5ldEV4cGxvcmVyVmVyc2lvbiAoKSB7XHJcblxyXG4gICAgICBcdGxldCBydiA9IC0xO1xyXG4gICAgICBcdGxldCByZSA9IG51bGw7XHJcbiAgICAgICAgY29uc3QgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xyXG5cclxuXHRcdGlmIChuYXZpZ2F0b3IuYXBwTmFtZSA9PSAnTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyJylcclxuXHRcdHtcclxuXHJcblx0XHRcdHJlICA9IG5ldyBSZWdFeHAoXCJNU0lFIChbMC05XXsxLH1bXFwuMC05XXswLH0pXCIpO1xyXG5cclxuXHRcdFx0aWYgKHJlLmV4ZWModWEpICE9PSBudWxsKSBydiA9IHBhcnNlRmxvYXQoIFJlZ0V4cC4kMSApO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAobmF2aWdhdG9yLmFwcE5hbWUgPT0gJ05ldHNjYXBlJykge1xyXG5cclxuXHRcdFx0cmUgID0gbmV3IFJlZ0V4cChcIlRyaWRlbnQvLipydjooWzAtOV17MSx9W1xcLjAtOV17MCx9KVwiKTtcclxuXHJcblx0XHRcdGlmIChyZS5leGVjKHVhKSAhPT0gbnVsbCkgcnYgPSBwYXJzZUZsb2F0KCBSZWdFeHAuJDEgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcnY7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEZXZpY2VJbmZvOyJdfQ==
